{
  "version": 3,
  "sources": ["../../image-compressor.js/dist/image-compressor.esm.js"],
  "sourcesContent": ["/*!\n * Image Compressor v1.1.4\n * https://xkeshi.github.io/image-compressor\n *\n * Copyright 2017-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2018-06-20T07:28:41.051Z\n */\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar canvasToBlob = createCommonjsModule(function (module) {\n(function (window) {\n\n  var CanvasPrototype =\n    window.HTMLCanvasElement && window.HTMLCanvasElement.prototype;\n  var hasBlobConstructor =\n    window.Blob &&\n    (function () {\n      try {\n        return Boolean(new Blob())\n      } catch (e) {\n        return false\n      }\n    })();\n  var hasArrayBufferViewSupport =\n    hasBlobConstructor &&\n    window.Uint8Array &&\n    (function () {\n      try {\n        return new Blob([new Uint8Array(100)]).size === 100\n      } catch (e) {\n        return false\n      }\n    })();\n  var BlobBuilder =\n    window.BlobBuilder ||\n    window.WebKitBlobBuilder ||\n    window.MozBlobBuilder ||\n    window.MSBlobBuilder;\n  var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/;\n  var dataURLtoBlob =\n    (hasBlobConstructor || BlobBuilder) &&\n    window.atob &&\n    window.ArrayBuffer &&\n    window.Uint8Array &&\n    function (dataURI) {\n      var matches,\n        mediaType,\n        isBase64,\n        dataString,\n        byteString,\n        arrayBuffer,\n        intArray,\n        i,\n        bb;\n      // Parse the dataURI components as per RFC 2397\n      matches = dataURI.match(dataURIPattern);\n      if (!matches) {\n        throw new Error('invalid data URI')\n      }\n      // Default to text/plain;charset=US-ASCII\n      mediaType = matches[2]\n        ? matches[1]\n        : 'text/plain' + (matches[3] || ';charset=US-ASCII');\n      isBase64 = !!matches[4];\n      dataString = dataURI.slice(matches[0].length);\n      if (isBase64) {\n        // Convert base64 to raw binary data held in a string:\n        byteString = atob(dataString);\n      } else {\n        // Convert base64/URLEncoded data component to raw binary:\n        byteString = decodeURIComponent(dataString);\n      }\n      // Write the bytes of the string to an ArrayBuffer:\n      arrayBuffer = new ArrayBuffer(byteString.length);\n      intArray = new Uint8Array(arrayBuffer);\n      for (i = 0; i < byteString.length; i += 1) {\n        intArray[i] = byteString.charCodeAt(i);\n      }\n      // Write the ArrayBuffer (or ArrayBufferView) to a blob:\n      if (hasBlobConstructor) {\n        return new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], {\n          type: mediaType\n        })\n      }\n      bb = new BlobBuilder();\n      bb.append(arrayBuffer);\n      return bb.getBlob(mediaType)\n    };\n  if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {\n    if (CanvasPrototype.mozGetAsFile) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this;\n        setTimeout(function () {\n          if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {\n            callback(dataURLtoBlob(self.toDataURL(type, quality)));\n          } else {\n            callback(self.mozGetAsFile('blob', type));\n          }\n        });\n      };\n    } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {\n      CanvasPrototype.toBlob = function (callback, type, quality) {\n        var self = this;\n        setTimeout(function () {\n          callback(dataURLtoBlob(self.toDataURL(type, quality)));\n        });\n      };\n    }\n  }\n  if (typeof undefined === 'function' && undefined.amd) {\n    undefined(function () {\n      return dataURLtoBlob\n    });\n  } else if (module.exports) {\n    module.exports = dataURLtoBlob;\n  } else {\n    window.dataURLtoBlob = dataURLtoBlob;\n  }\n})(window);\n});\n\n/* globals Blob */\nvar toString = Object.prototype.toString;\n\nvar isBlob = function (x) {\n\treturn x instanceof Blob || toString.call(x) === '[object Blob]';\n};\n\nvar DEFAULTS = {\n  /**\n   * Indicates if read the image's Exif Orientation information,\n   * and then rotate or flip the image automatically.\n   * @type {boolean}\n   */\n  checkOrientation: true,\n\n  /**\n   * The max width of the output image.\n   * @type {number}\n   */\n  maxWidth: Infinity,\n\n  /**\n   * The max height of the output image.\n   * @type {number}\n   */\n  maxHeight: Infinity,\n\n  /**\n   * The min width of the output image.\n   * @type {number}\n   */\n  minWidth: 0,\n\n  /**\n   * The min height of the output image.\n   * @type {number}\n   */\n  minHeight: 0,\n\n  /**\n   * The width of the output image.\n   * If not specified, the natural width of the source image will be used.\n   * @type {number}\n   */\n  width: undefined,\n\n  /**\n   * The height of the output image.\n   * If not specified, the natural height of the source image will be used.\n   * @type {number}\n   */\n  height: undefined,\n\n  /**\n   * The quality of the output image.\n   * It must be a number between `0` and `1`,\n   * and only available for `image/jpeg` and `image/webp` images.\n   * Check out {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob canvas.toBlob}.\n   * @type {number}\n   */\n  quality: 0.8,\n\n  /**\n   * The mime type of the output image.\n   * By default, the original mime type of the source image file will be used.\n   * @type {string}\n   */\n  mimeType: 'auto',\n\n  /**\n   * PNG files over this value (5M by default) will be converted to JPEGs.\n   * To disable this, just set the value to `Infinity`.\n   * Check out {@link https://github.com/xkeshi/image-compressor/issues/2 #2}.\n   * @type {number}\n   */\n  convertSize: 5000000,\n\n  /**\n   * The hook function to execute before draw the image into the canvas for compression.\n   * @type {Function}\n   * @param {CanvasRenderingContext2D} context - The 2d rendering context of the canvas.\n   * @param {HTMLCanvasElement} canvas - The canvas for compression.\n   * @example\n   * function (context, canvas) { context.fillStyle = '#fff' }\n   */\n  beforeDraw: null,\n\n  /**\n   * The hook function to execute after drew the image into the canvas for compression.\n   * @type {Function}\n   * @param {CanvasRenderingContext2D} context - The 2d rendering context of the canvas.\n   * @param {HTMLCanvasElement} canvas - The canvas for compression.\n   * @example\n   * function (context, canvas) { context.filter = grayscale(100%) }\n   */\n  drew: null,\n\n  /**\n   * The hook function to execute when success to compress the image.\n   * @type {Function}\n   * @param {File} file - The compressed image File object.\n   * @example\n   * function (file) { console.log(file) }\n   */\n  success: null,\n\n  /**\n   * The hook function to execute when fail to compress the image.\n   * @type {Function}\n   * @param {Error} err - An Error object.\n   * @example\n   * function (err) { console.log(err.message) }\n   */\n  error: null\n};\n\nvar REGEXP_IMAGE_TYPE = /^image\\/.+$/;\n\n/**\n * Check if the given value is a mime type of image.\n * @param {*} value - The value to check.\n * @returns {boolean} Returns `true` if the given is a mime type of image, else `false`.\n */\nfunction isImageType(value) {\n  return REGEXP_IMAGE_TYPE.test(value);\n}\n\n/**\n * Convert image type to extension.\n * @param {string} value - The image type to convert.\n * @param {boolean} [includeDot=true] - Include a leading dot or not.\n * @returns {boolean} Returns the image extension.\n */\nfunction imageTypeToExtension(value) {\n  var includeDot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  var extension = isImageType(value) ? value.substr(6) : '';\n\n  if (extension === 'jpeg') {\n    extension = 'jpg';\n  }\n\n  if (extension && includeDot) {\n    extension = '.' + extension;\n  }\n\n  return extension;\n}\n\nvar fromCharCode = String.fromCharCode;\n\n/**\n * Get string from char code in data view.\n * @param {DataView} dataView - The data view for read.\n * @param {number} start - The start index.\n * @param {number} length - The read length.\n * @returns {string} The read result.\n */\n\nfunction getStringFromCharCode(dataView, start, length) {\n  var str = '';\n  var i = void 0;\n\n  length += start;\n\n  for (i = start; i < length; i += 1) {\n    str += fromCharCode(dataView.getUint8(i));\n  }\n\n  return str;\n}\n\nvar _window = window,\n    btoa = _window.btoa;\n\n/**\n * Transform array buffer to Data URL.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n * @param {string} mimeType - The mime type of the Data URL.\n * @returns {string} The result Data URL.\n */\n\nfunction arrayBufferToDataURL(arrayBuffer, mimeType) {\n  var uint8 = new Uint8Array(arrayBuffer);\n  var data = '';\n\n  // TypedArray.prototype.forEach is not supported in some browsers as IE.\n  if (typeof uint8.forEach === 'function') {\n    uint8.forEach(function (value) {\n      data += fromCharCode(value);\n    });\n  } else {\n    var length = uint8.length;\n\n\n    for (var i = 0; i < length; i += 1) {\n      data += fromCharCode(uint8[i]);\n    }\n  }\n\n  return 'data:' + mimeType + ';base64,' + btoa(data);\n}\n\n/**\n * Get orientation value from given array buffer.\n * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n * @returns {number} The read orientation value.\n */\nfunction getOrientation(arrayBuffer) {\n  var dataView = new DataView(arrayBuffer);\n  var orientation = void 0;\n  var littleEndian = void 0;\n  var app1Start = void 0;\n  var ifdStart = void 0;\n\n  // Only handle JPEG image (start by 0xFFD8)\n  if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n    var length = dataView.byteLength;\n    var offset = 2;\n\n    while (offset < length) {\n      if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n        app1Start = offset;\n        break;\n      }\n\n      offset += 1;\n    }\n  }\n\n  if (app1Start) {\n    var exifIDCode = app1Start + 4;\n    var tiffOffset = app1Start + 10;\n\n    if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n      var endianness = dataView.getUint16(tiffOffset);\n\n      littleEndian = endianness === 0x4949;\n\n      if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n            var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n            if (firstIFDOffset >= 0x00000008) {\n              ifdStart = tiffOffset + firstIFDOffset;\n            }\n          }\n        }\n    }\n  }\n\n  if (ifdStart) {\n    var _length = dataView.getUint16(ifdStart, littleEndian);\n    var _offset = void 0;\n    var i = void 0;\n\n    for (i = 0; i < _length; i += 1) {\n      _offset = ifdStart + i * 12 + 2;\n\n      if (dataView.getUint16(_offset, littleEndian) === 0x0112 /* Orientation */) {\n          // 8 is the offset of the current tag's value\n          _offset += 8;\n\n          // Get the original orientation value\n          orientation = dataView.getUint16(_offset, littleEndian);\n\n          // Override the orientation with its default value\n          dataView.setUint16(_offset, 1, littleEndian);\n          break;\n        }\n    }\n  }\n\n  return orientation;\n}\n\n/**\n * Parse Exif Orientation value.\n * @param {number} orientation - The orientation to parse.\n * @returns {Object} The parsed result.\n */\nfunction parseOrientation(orientation) {\n  var rotate = 0;\n  var scaleX = 1;\n  var scaleY = 1;\n\n  switch (orientation) {\n    // Flip horizontal\n    case 2:\n      scaleX = -1;\n      break;\n\n    // Rotate left 180°\n    case 3:\n      rotate = -180;\n      break;\n\n    // Flip vertical\n    case 4:\n      scaleY = -1;\n      break;\n\n    // Flip vertical and rotate right 90°\n    case 5:\n      rotate = 90;\n      scaleY = -1;\n      break;\n\n    // Rotate right 90°\n    case 6:\n      rotate = 90;\n      break;\n\n    // Flip horizontal and rotate right 90°\n    case 7:\n      rotate = 90;\n      scaleX = -1;\n      break;\n\n    // Rotate left 90°\n    case 8:\n      rotate = -90;\n      break;\n\n    default:\n  }\n\n  return {\n    rotate: rotate,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n\nvar REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/i;\n\n/**\n * Normalize decimal number.\n * Check out {@link http://0.30000000000000004.com/}\n * @param {number} value - The value to normalize.\n * @param {number} [times=100000000000] - The times for normalizing.\n * @returns {number} Returns the normalized number.\n */\nfunction normalizeDecimalNumber(value) {\n  var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n\n  return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _window$1 = window,\n    ArrayBuffer$1 = _window$1.ArrayBuffer,\n    FileReader = _window$1.FileReader;\n\nvar URL = window.URL || window.webkitURL;\nvar REGEXP_EXTENSION = /\\.\\w+$/;\n\n/**\n * Creates a new image compressor.\n * @class\n */\n\nvar ImageCompressor = function () {\n  /**\n   * The constructor of ImageCompressor.\n   * @param {File|Blob} file - The target image file for compressing.\n   * @param {Object} [options] - The options for compressing.\n   */\n  function ImageCompressor(file, options) {\n    classCallCheck(this, ImageCompressor);\n\n    this.result = null;\n\n    if (file) {\n      this.compress(file, options);\n    }\n  }\n\n  /**\n   * The main compress method.\n   * @param {File|Blob} file - The target image file for compressing.\n   * @param {Object} [options] - The options for compressing.\n   * @returns {Promise} - A Promise instance.\n   */\n\n\n  createClass(ImageCompressor, [{\n    key: 'compress',\n    value: function compress(file, options) {\n      var _this = this;\n\n      var image = new Image();\n\n      options = _extends({}, DEFAULTS, options);\n\n      if (!ArrayBuffer$1) {\n        options.checkOrientation = false;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!isBlob(file)) {\n          reject(new Error('The first argument must be a File or Blob object.'));\n          return;\n        }\n\n        var mimeType = file.type;\n\n        if (!isImageType(mimeType)) {\n          reject(new Error('The first argument must be an image File or Blob object.'));\n          return;\n        }\n\n        if (!URL && !FileReader) {\n          reject(new Error('The current browser does not support image compression.'));\n          return;\n        }\n\n        if (URL && !options.checkOrientation) {\n          resolve({\n            url: URL.createObjectURL(file)\n          });\n        } else if (FileReader) {\n          var reader = new FileReader();\n          var checkOrientation = options.checkOrientation && mimeType === 'image/jpeg';\n\n          reader.onload = function (_ref) {\n            var target = _ref.target;\n            var result = target.result;\n\n\n            resolve(checkOrientation ? _extends({\n              url: arrayBufferToDataURL(result, mimeType)\n            }, parseOrientation(getOrientation(result))) : {\n              url: result\n            });\n          };\n          reader.onabort = function () {\n            reject(new Error('Aborted to load the image with FileReader.'));\n          };\n          reader.onerror = function () {\n            reject(new Error('Failed to load the image with FileReader.'));\n          };\n\n          if (checkOrientation) {\n            reader.readAsArrayBuffer(file);\n          } else {\n            reader.readAsDataURL(file);\n          }\n        }\n      }).then(function (data) {\n        return new Promise(function (resolve, reject) {\n          image.onload = function () {\n            return resolve(_extends({}, data, {\n              naturalWidth: image.naturalWidth,\n              naturalHeight: image.naturalHeight\n            }));\n          };\n          image.onabort = function () {\n            reject(new Error('Aborted to load the image.'));\n          };\n          image.onerror = function () {\n            reject(new Error('Failed to load the image.'));\n          };\n          image.alt = file.name;\n          image.src = data.url;\n        });\n      }).then(function (_ref2) {\n        var naturalWidth = _ref2.naturalWidth,\n            naturalHeight = _ref2.naturalHeight,\n            _ref2$rotate = _ref2.rotate,\n            rotate = _ref2$rotate === undefined ? 0 : _ref2$rotate,\n            _ref2$scaleX = _ref2.scaleX,\n            scaleX = _ref2$scaleX === undefined ? 1 : _ref2$scaleX,\n            _ref2$scaleY = _ref2.scaleY,\n            scaleY = _ref2$scaleY === undefined ? 1 : _ref2$scaleY;\n        return new Promise(function (resolve) {\n          var canvas = document.createElement('canvas');\n          var context = canvas.getContext('2d');\n          var aspectRatio = naturalWidth / naturalHeight;\n          var maxWidth = Math.max(options.maxWidth, 0) || Infinity;\n          var maxHeight = Math.max(options.maxHeight, 0) || Infinity;\n          var minWidth = Math.max(options.minWidth, 0) || 0;\n          var minHeight = Math.max(options.minHeight, 0) || 0;\n          var width = naturalWidth;\n          var height = naturalHeight;\n\n          if (maxWidth < Infinity && maxHeight < Infinity) {\n            if (maxHeight * aspectRatio > maxWidth) {\n              maxHeight = maxWidth / aspectRatio;\n            } else {\n              maxWidth = maxHeight * aspectRatio;\n            }\n          } else if (maxWidth < Infinity) {\n            maxHeight = maxWidth / aspectRatio;\n          } else if (maxHeight < Infinity) {\n            maxWidth = maxHeight * aspectRatio;\n          }\n\n          if (minWidth > 0 && minHeight > 0) {\n            if (minHeight * aspectRatio > minWidth) {\n              minHeight = minWidth / aspectRatio;\n            } else {\n              minWidth = minHeight * aspectRatio;\n            }\n          } else if (minWidth > 0) {\n            minHeight = minWidth / aspectRatio;\n          } else if (minHeight > 0) {\n            minWidth = minHeight * aspectRatio;\n          }\n\n          if (options.width > 0) {\n            var _options = options;\n            width = _options.width;\n\n            height = width / aspectRatio;\n          } else if (options.height > 0) {\n            var _options2 = options;\n            height = _options2.height;\n\n            width = height * aspectRatio;\n          }\n\n          width = Math.min(Math.max(width, minWidth), maxWidth);\n          height = Math.min(Math.max(height, minHeight), maxHeight);\n\n          var destX = -width / 2;\n          var destY = -height / 2;\n          var destWidth = width;\n          var destHeight = height;\n\n          if (Math.abs(rotate) % 180 === 90) {\n            var _width$height = {\n              width: height,\n              height: width\n            };\n            width = _width$height.width;\n            height = _width$height.height;\n          }\n\n          canvas.width = normalizeDecimalNumber(width);\n          canvas.height = normalizeDecimalNumber(height);\n\n          if (!isImageType(options.mimeType)) {\n            options.mimeType = file.type;\n          }\n\n          var defaultFillStyle = 'transparent';\n\n          // Converts PNG files over the `convertSize` to JPEGs.\n          if (file.size > options.convertSize && options.mimeType === 'image/png') {\n            defaultFillStyle = '#fff';\n            options.mimeType = 'image/jpeg';\n          }\n\n          // Override the default fill color (#000, black)\n          context.fillStyle = defaultFillStyle;\n          context.fillRect(0, 0, width, height);\n          context.save();\n          context.translate(width / 2, height / 2);\n          context.rotate(rotate * Math.PI / 180);\n          context.scale(scaleX, scaleY);\n\n          if (options.beforeDraw) {\n            options.beforeDraw.call(_this, context, canvas);\n          }\n\n          context.drawImage(image, Math.floor(normalizeDecimalNumber(destX)), Math.floor(normalizeDecimalNumber(destY)), Math.floor(normalizeDecimalNumber(destWidth)), Math.floor(normalizeDecimalNumber(destHeight)));\n\n          if (options.drew) {\n            options.drew.call(_this, context, canvas);\n          }\n\n          context.restore();\n\n          var done = function done(result) {\n            resolve({\n              naturalWidth: naturalWidth,\n              naturalHeight: naturalHeight,\n              result: result\n            });\n          };\n\n          if (canvas.toBlob) {\n            canvas.toBlob(done, options.mimeType, options.quality);\n          } else {\n            done(canvasToBlob(canvas.toDataURL(options.mimeType, options.quality)));\n          }\n        });\n      }).then(function (_ref3) {\n        var naturalWidth = _ref3.naturalWidth,\n            naturalHeight = _ref3.naturalHeight,\n            result = _ref3.result;\n\n        if (URL && !options.checkOrientation) {\n          URL.revokeObjectURL(image.src);\n        }\n\n        if (result) {\n          // Returns original file if the result is greater than it and without size related options\n          if (result.size > file.size && options.mimeType === file.type && !(options.width > naturalWidth || options.height > naturalHeight || options.minWidth > naturalWidth || options.minHeight > naturalHeight)) {\n            result = file;\n          } else {\n            var date = new Date();\n\n            result.lastModified = date.getTime();\n            result.lastModifiedDate = date;\n            result.name = file.name;\n\n            // Convert the extension to match its type\n            if (result.name && result.type !== file.type) {\n              result.name = result.name.replace(REGEXP_EXTENSION, imageTypeToExtension(result.type));\n            }\n          }\n        } else {\n          // Returns original file if the result is null in some cases.\n          result = file;\n        }\n\n        _this.result = result;\n\n        if (options.success) {\n          options.success.call(_this, result);\n        }\n\n        return Promise.resolve(result);\n      }).catch(function (err) {\n        if (!options.error) {\n          throw err;\n        }\n\n        options.error.call(_this, err);\n      });\n    }\n  }]);\n  return ImageCompressor;\n}();\n\nexport default ImageCompressor;\n"],
  "mappings": "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",
  "names": ["window", "ImageCompressor", "done"]
}
